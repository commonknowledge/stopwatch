# Generated by Django 3.2.5 on 2021-08-10 16:36

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.images.blocks
import wagtail.snippets.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0062_comment_models_and_pagesubscription'),
        ('stopwatch', '0006_auto_20210729_1204'),
    ]

    operations = [
        migrations.CreateModel(
            name='Form',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.core.fields.RichTextField(blank=True)),
                ('thank_you_page', wagtail.core.fields.StreamField([('text', wagtail.core.blocks.RichTextBlock()), ('embed', wagtail.core.blocks.StructBlock([('embed_url', wagtail.core.blocks.URLBlock())])), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('articles_list', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('site_area', wagtail.core.blocks.PageChooserBlock(page_type=['stopwatch.Category']))])), ('cta', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock()), ('target', wagtail.core.blocks.PageChooserBlock(required=False))])), ('tabs', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('tabs', wagtail.core.blocks.StreamBlock([('stats', wagtail.core.blocks.StructBlock([('icon', wagtail.core.blocks.ChoiceBlock(choices=[('chat-left', 'Speech Bubble'), ('grap-up', 'Graph'), ('hammer', 'Gavel')], template='widgets/icon_block.html')), ('short_title', wagtail.core.blocks.CharBlock()), ('title', wagtail.core.blocks.CharBlock()), ('call_to_action', wagtail.core.blocks.CharBlock(required=False)), ('related_page', wagtail.core.blocks.PageChooserBlock(required=False))])), ('info', wagtail.core.blocks.StructBlock([('icon', wagtail.core.blocks.ChoiceBlock(choices=[('chat-left', 'Speech Bubble'), ('grap-up', 'Graph'), ('hammer', 'Gavel')], template='widgets/icon_block.html')), ('short_title', wagtail.core.blocks.CharBlock()), ('title', wagtail.core.blocks.CharBlock()), ('call_to_action', wagtail.core.blocks.CharBlock(required=False)), ('related_page', wagtail.core.blocks.PageChooserBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock()), ('author', wagtail.snippets.blocks.SnippetChooserBlock('stopwatch.StaffMember', required=False))]))]))])), ('newsletter_signup', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock()), ('target', wagtail.core.blocks.PageChooserBlock(required=False))]))])),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AlterField(
            model_name='article',
            name='body',
            field=wagtail.core.fields.StreamField([('text', wagtail.core.blocks.RichTextBlock()), ('embed', wagtail.core.blocks.StructBlock([('embed_url', wagtail.core.blocks.URLBlock())])), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('articles_list', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('site_area', wagtail.core.blocks.PageChooserBlock(page_type=['stopwatch.Category']))])), ('cta', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock()), ('target', wagtail.core.blocks.PageChooserBlock(required=False))])), ('tabs', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('tabs', wagtail.core.blocks.StreamBlock([('stats', wagtail.core.blocks.StructBlock([('icon', wagtail.core.blocks.ChoiceBlock(choices=[('chat-left', 'Speech Bubble'), ('grap-up', 'Graph'), ('hammer', 'Gavel')], template='widgets/icon_block.html')), ('short_title', wagtail.core.blocks.CharBlock()), ('title', wagtail.core.blocks.CharBlock()), ('call_to_action', wagtail.core.blocks.CharBlock(required=False)), ('related_page', wagtail.core.blocks.PageChooserBlock(required=False))])), ('info', wagtail.core.blocks.StructBlock([('icon', wagtail.core.blocks.ChoiceBlock(choices=[('chat-left', 'Speech Bubble'), ('grap-up', 'Graph'), ('hammer', 'Gavel')], template='widgets/icon_block.html')), ('short_title', wagtail.core.blocks.CharBlock()), ('title', wagtail.core.blocks.CharBlock()), ('call_to_action', wagtail.core.blocks.CharBlock(required=False)), ('related_page', wagtail.core.blocks.PageChooserBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock()), ('author', wagtail.snippets.blocks.SnippetChooserBlock('stopwatch.StaffMember', required=False))]))]))])), ('newsletter_signup', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock()), ('target', wagtail.core.blocks.PageChooserBlock(required=False))]))], blank=True),
        ),
        migrations.AlterField(
            model_name='article',
            name='summary',
            field=wagtail.core.fields.StreamField([('text', wagtail.core.blocks.RichTextBlock()), ('embed', wagtail.core.blocks.StructBlock([('embed_url', wagtail.core.blocks.URLBlock())])), ('document', wagtail.documents.blocks.DocumentChooserBlock())], blank=True),
        ),
        migrations.AlterField(
            model_name='landingpage',
            name='body',
            field=wagtail.core.fields.StreamField([('text', wagtail.core.blocks.RichTextBlock()), ('embed', wagtail.core.blocks.StructBlock([('embed_url', wagtail.core.blocks.URLBlock())])), ('document', wagtail.documents.blocks.DocumentChooserBlock()), ('articles_list', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('site_area', wagtail.core.blocks.PageChooserBlock(page_type=['stopwatch.Category']))])), ('cta', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock()), ('target', wagtail.core.blocks.PageChooserBlock(required=False))])), ('tabs', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('tabs', wagtail.core.blocks.StreamBlock([('stats', wagtail.core.blocks.StructBlock([('icon', wagtail.core.blocks.ChoiceBlock(choices=[('chat-left', 'Speech Bubble'), ('grap-up', 'Graph'), ('hammer', 'Gavel')], template='widgets/icon_block.html')), ('short_title', wagtail.core.blocks.CharBlock()), ('title', wagtail.core.blocks.CharBlock()), ('call_to_action', wagtail.core.blocks.CharBlock(required=False)), ('related_page', wagtail.core.blocks.PageChooserBlock(required=False))])), ('info', wagtail.core.blocks.StructBlock([('icon', wagtail.core.blocks.ChoiceBlock(choices=[('chat-left', 'Speech Bubble'), ('grap-up', 'Graph'), ('hammer', 'Gavel')], template='widgets/icon_block.html')), ('short_title', wagtail.core.blocks.CharBlock()), ('title', wagtail.core.blocks.CharBlock()), ('call_to_action', wagtail.core.blocks.CharBlock(required=False)), ('related_page', wagtail.core.blocks.PageChooserBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock()), ('author', wagtail.snippets.blocks.SnippetChooserBlock('stopwatch.StaffMember', required=False))]))]))])), ('newsletter_signup', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('content', wagtail.core.blocks.RichTextBlock()), ('target', wagtail.core.blocks.PageChooserBlock(required=False))]))], blank=True),
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='stopwatch.form')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
